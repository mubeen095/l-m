{"id":1776,"date":"2024-05-10T06:46:35","date_gmt":"2024-05-10T06:46:35","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=1776"},"modified":"2024-05-10T06:46:35","modified_gmt":"2024-05-10T06:46:35","slug":"keywords-in-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/keywords-in-c\/","title":{"rendered":"Keywords In C"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#keywords-in-c\">Keywords In C<\/a><\/li><li ><a href=\"#what-are-keywords\">What are Keywords?<\/a><\/li><li ><a href=\"#auto\">auto<\/a><\/li><li ><a href=\"#break-and-continue\">break and continue<\/a><\/li><li ><a href=\"#switch-case-and-default\">Switch, case, and default<\/a><\/li><li ><a href=\"#char\">char<\/a><\/li><li ><a href=\"#const\">const<\/a><\/li><li ><a href=\"#do\">Do<\/a><\/li><li ><a href=\"#if-else\">if-else<\/a><\/li><li ><a href=\"#enum\">enum<\/a><\/li><li ><a href=\"#extern\">extern<\/a><\/li><li ><a href=\"#for\">for<\/a><\/li><li ><a href=\"#goto\">goto<\/a><\/li><li ><a href=\"#int\">int<\/a><\/li><li ><a href=\"#short-long-signed-and-unsigned\">Short, long, signed, and unsigned<\/a><\/li><li ><a href=\"#sizeof\">sizeof\u00a0<\/a><\/li><li ><a href=\"#register\">register<\/a><\/li><li ><a href=\"#static\">static\u00a0<\/a><\/li><li ><a href=\"#struct\">struct\u00a0<\/a><\/li><li ><a href=\"#typedef\">typedef\u00a0<\/a><\/li><li ><a href=\"#union\">union\u00a0<\/a><\/li><li ><a href=\"#void\">void\u00a0<\/a><\/li><li ><a href=\"#volatile\">volatile <\/a><\/li><li ><a href=\"#faq-keywords-in-c\">FAQ- Keywords in C<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"keywords-in-c\">Keywords In C<\/h2>\n\n\n\n<p>Keywords in C programming are like building blocks that give the language its structure and meaning. Whether you&#8217;re new to programming or have experience, understanding these words is crucial for using C effectively. In this discussion, we&#8217;ll dive into what C keywords are, why they matter, and the different types you&#8217;ll encounter in the language.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"what-are-keywords\">What are Keywords?<\/h2>\n\n\n\n<p>Keywords in programming are like special words that have specific meanings for the computer. These words are already reserved for specific tasks, and you can&#8217;t use them as names for things in your program. They are crucial for the program&#8217;s structure and operation.<\/p>\n\n\n\n<p>Here&#8217;s a list of keywords or reserved words in the C programming language:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>auto<\/li>\n\n\n\n<li>break<\/li>\n\n\n\n<li>case<\/li>\n\n\n\n<li>char<\/li>\n\n\n\n<li>const<\/li>\n\n\n\n<li>continue<\/li>\n\n\n\n<li>default<\/li>\n\n\n\n<li>do<\/li>\n\n\n\n<li>double<\/li>\n\n\n\n<li>else<\/li>\n\n\n\n<li>enum<\/li>\n\n\n\n<li>extern<\/li>\n\n\n\n<li>float<\/li>\n\n\n\n<li>for<\/li>\n\n\n\n<li>goto<\/li>\n\n\n\n<li>if<\/li>\n\n\n\n<li>int<\/li>\n\n\n\n<li>long<\/li>\n\n\n\n<li>register<\/li>\n\n\n\n<li>return<\/li>\n\n\n\n<li>short<\/li>\n\n\n\n<li>signed<\/li>\n\n\n\n<li>sizeof<\/li>\n\n\n\n<li>static<\/li>\n\n\n\n<li>struct<\/li>\n\n\n\n<li>switch<\/li>\n\n\n\n<li>typedef<\/li>\n\n\n\n<li>union<\/li>\n\n\n\n<li>unsigned<\/li>\n\n\n\n<li>void<\/li>\n\n\n\n<li>volatile<\/li>\n\n\n\n<li>while<\/li>\n<\/ol>\n\n\n\n<p>These keywords have specific meanings in C and are used for various programming tasks and control flow operations. It&#8217;s important not to use them as variable or function names in your C programs, as they are reserved for the language&#8217;s syntax.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"auto\">auto<\/h2>\n\n\n\n<p>&#8220;Auto&#8221; is a special word in C that you can use when you declare a variable inside a function or a specific part of your code. These &#8220;auto&#8221; variables are like temporary placeholders and can only be used in that specific part of your code. By default, they have random values, so it&#8217;s essential to give them a value before using them. Think of them as local, short-lived storage spots that only make sense within a particular section of your program.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>auto int num;<\/p>\n<\/blockquote>\n\n\n\n<p>In this C program, we have a variable named &#8220;num&#8221; with the &#8220;auto&#8221; storage class specifier, and its type is &#8220;int.&#8221; The &#8220;auto&#8221; keyword is used to specify that &#8220;num&#8221; is an automatic variable. Here&#8217;s an example of how this might look in a program:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ auto keyword\n#include &lt;stdio.h&gt;\n \nint printvalue()\n{\n  auto int a = 20;\n  printf(\"%d\", a);\n}\n \n\/\/ Driver code\nint main()\n{\n  printvalue();\n  return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<p>20<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"break-and-continue\">break and continue<\/h2>\n\n\n\n<p>In this C program, we have a variable named &#8220;num&#8221; with the &#8220;auto&#8221; storage class specifier, and its type is &#8220;int.&#8221; The &#8220;auto&#8221; keyword is used to specify that &#8220;num&#8221; is an automatic variable. Here&#8217;s an example of how this might look in a program<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to show use\n\/\/ of break and continue\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main()\n{\n  for (int i = 1; i &lt;= 10; i++)\n  {\n    if (i == 2)\n    {\n      continue;\n    }\n    if (i == 6)\n    {\n      break;\n    }\n    printf(\"%d \", i);\n  }\n  return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output <\/strong><\/p>\n\n\n\n<p>1 3 4 5<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"switch-case-and-default\">Switch, case, and default<\/h2>\n\n\n\n<p>The switch statement in C is a useful alternative to the if-else ladder statement. It allows us to perform different operations based on the possible values of a single variable, known as the switch variable. Instead of writing a series of if-else conditions, you can use the switch statement to make the code more organized and easier to read when dealing with multiple cases based on the value of a single variable.<\/p>\n\n\n\n<p>switch(Expression)<br>{<br>case &#8216;1&#8217;: \/\/ operation 1<br>break;<br>case:&#8217;2&#8242;: \/\/ operation 2<br>break;<br>default: \/\/ default statement to be executed<br>}<\/p>\n\n\n\n<p>Below is the C program to demonstrate the switch case statement:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ switch case statement\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main() {\n  int i = 4;\n  switch (i) {\n    case 1:\n      printf(\"Case 1\\n\");break;\n    case 2:\n      printf(\"Case 2\\n\");break;\n    case 3:\n      printf(\"Case 3\\n\");break;\n    case 4:\n      printf(\"Case 4\\n\");break;\n    default:\n      printf(\"Default\\n\");break;\n  }\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Output<\/strong><\/h4>\n\n\n\n<p>Case 4<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Output<\/h4>\n\n\n\n<p>Case 4<\/p>\n\n\n\n<p>Default <\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"char\">char<\/h2>\n\n\n\n<p>In C programming, the &#8220;char&#8221; keyword is used to declare a character variable. For example:<\/p>\n\n\n\n<p>Below is the C program to demonstrate the char keyword:<\/p>\n\n\n\n<p><code>\/\/ C program to demonstrate<\/code><\/p>\n\n\n\n<p><code>\/\/ char keyword<\/code><\/p>\n\n\n\n<p><code>#include &lt;stdio.h&gt;<\/code><\/p>\n\n\n\n<p><code>\/\/ Driver code<\/code><\/p>\n\n\n\n<p><code>int<\/code><code>main() {<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>char<\/code><code>c = <\/code><code>'a'<\/code><code>;<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>printf<\/code><code>(<\/code><code>\"%c\"<\/code><code>, c);<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>return<\/code><code>0;<\/code><\/p>\n\n\n\n<p><code>}<\/code><\/p>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<p>a<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"const\">const<\/h2>\n\n\n\n<p>In C, the &#8220;const&#8221; keyword is used to define a variable whose value cannot be changed once it&#8217;s been assigned. It creates a constant variable<\/p>\n\n\n\n<p>const int num = 10;<\/p>\n\n\n\n<p>Below is the C program to demonstrate the const keyword:<\/p>\n\n\n\n<p><code>\/\/ C program to demonstrate<\/code><\/p>\n\n\n\n<p><code>\/\/ const keyword<\/code><\/p>\n\n\n\n<p><code>#include &lt;stdio.h&gt;<\/code><\/p>\n\n\n\n<p><code>\/\/ Driver code<\/code><\/p>\n\n\n\n<p><code>int<\/code><code>main() {<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>const<\/code><code>int<\/code><code>a = 11;<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>a = a + 2;<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>printf<\/code><code>(<\/code><code>\"%d\"<\/code><code>, a);<\/code><\/p>\n\n\n\n<p><code>&nbsp;&nbsp;<\/code><code>return<\/code><code>0;<\/code><\/p>\n\n\n\n<p><code>}<\/code><\/p>\n\n\n\n<h4 class=\"wp-block-heading\" id=\"output\">Output <\/h4>\n\n\n\n<p>error: assignment of read-only variable &#8216;a&#8217;<br>a = a + 2;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"do\">Do<\/h2>\n\n\n\n<p>The <code>do-while<\/code> loop is used to create a loop that executes its code block at least once before checking the condition to determine if it should continue looping. After the initial execution, it continues to repeat the code block as long as the specified condition remains true.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ do-while keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main()\n{\n  int i = 1;\n  do {\n    printf(\"%d \", i);\n    i++;\n  } while(i &lt;= 5);\n   \n  return 0;\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\" id=\"output\">output <\/h4>\n\n\n\n<p>12345<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"double-and-float\">double and float<\/h2>\n\n\n\n<p>In C, both doubles and floats are used to declare variables that can store decimal numbers (floating-point numbers). However, they differ in terms of precision:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li><strong>Floats:<\/strong> Floats have 7 decimal digits of precision. They are represented using 32 bits in memory.<\/li>\n\n\n\n<li><strong>Doubles:<\/strong> Doubles, on the other hand, have 15 decimal digits of precision. They are represented using 64 bits in memory.<\/li>\n<\/ol>\n\n\n\n<p>Doubles provide greater precision compared to floats, but they also consume more memory. The choice between using float or double depends on the specific requirements of a program. Use floats when memory is a concern, and you don&#8217;t need high precision, and use doubles when precision is essential, even if it means using more memory.<\/p>\n\n\n\n<p>&nbsp;C program to demonstrate double float keyword is provided below :<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ double float keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main() {\n  float f = 0.3;\n  double d = 10.67;\n  printf(\"Float value: %f\\n\", f);\n  printf(\"Double value: %f\\n\", d);\n  return 0;\n}<\/code><\/pre>\n\n\n\n<p>Output <\/p>\n\n\n\n<p>Float value: 0.300000 Double value: 10.670000<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"if-else\">if-else<\/h2>\n\n\n\n<p>The if-else statement is used to make decisions in a program. It checks a specified condition, and based on whether that condition is true or false, it executes different blocks of code.<\/p>\n\n\n\n<p>if(marks == 97) {<br>\/\/ if marks are 97 then will execute this block of code<br>}<br>else {<br>\/\/ else it will execute this block of code<br>}<\/p>\n\n\n\n<p>&nbsp;C program to demonstrate an if-else statement<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ if-else keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main()\n{\n  int a = 10;\n  if(a &lt; 11)\n  {\n    printf(\"A is less than 11\");\n  }\n  else\n  {\n    printf(\"A is equal to or \"\n           \"greater than 11\");\n  } \n  return 0;\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Output<\/h4>\n\n\n\n<p>A is less than 11<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"enum\">enum<\/h2>\n\n\n\n<p>The <code>enum<\/code> keyword is used to declare an enumeration, which is a user-defined data type in C. An enumeration holds a list of user-defined integer constants, and by default, the value of each constant starts at zero and increments by one for each subsequent constant. However, you can change the initial values if needed.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/ An example program to\n\/\/ demonstrate working of\n\/\/ enum in C\n#include&lt;stdio.h&gt;\n \n\/\/ enum declaration:\nenum week{Mon, Tue, Wed, Thur, Fri, Sat, Sun};\n \n\/\/ Driver code\nint main()\n{\n\/\/object of the enum (week), called day\n  enum week day;\n  day = Wed;\n  printf(\"%d\", day);\n  return 0;\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Output<\/h4>\n\n\n\n<p>2<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"extern\">extern<\/h2>\n\n\n\n<p>Your description of the <code>extern<\/code> keyword in C is accurate.<\/p>\n\n\n\n<p>The <code>extern<\/code> keyword is used to declare a variable or a function that has external linkage, meaning it&#8217;s defined in another source file or somewhere else in the program. When you declare a variable or function as <code>extern<\/code>, you are telling the compiler that the actual definition of that variable or function is located elsewhere, and it should be linked during the linking phase of compilation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;stdio.h&gt;\n \nextern int a;\n \nint main(){\n   \n    printf(\"%d\", a);\n \n      return 0;\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"for\">for<\/h2>\n\n\n\n<p>The &#8220;for&#8221; keyword is used to declare a for-loop, which is a type of loop that is designed to run a specified number of times. It&#8217;s a fundamental control structure in C and many other programming languages.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ for keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main()\n{\n  for (int i = 0; i &lt; 5; i++)\n  {\n    printf(\"%d \", i);\n  }\n  return 0;\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Output <\/h4>\n\n\n\n<p>01234<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"goto\">goto<\/h2>\n\n\n\n<p>The <code>goto<\/code> statement is used to transfer control of the program to a specified label within the same function or block of code. It allows you to perform an unconditional jump from one part of your code to another. While <code>goto<\/code> can be a powerful tool, it&#8217;s often discouraged in modern programming because it can make code less structured and harder to understand.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>goto label;<\/p>\n\n\n\n<p>\/\/ code<\/p>\n\n\n\n<p>label:<\/p>\n<\/blockquote>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program demonstrate\n\/\/ goto keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Function to print numbers\n\/\/ from 1 to 10\nvoid printNumbers() {\n    int n = 1;\n \nlabel:\n    printf(\"%d \", n);\n    n++;\n    if (n &lt;= 10) goto label;\n}\n \n\/\/ Driver code\nint main(){\n    printNumbers();\n    return 0;\n}<\/code><\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Output<\/h4>\n\n\n\n<p>12345678910<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"int\">int<\/h2>\n\n\n\n<p>Your description of the <code>int<\/code> keyword in C is mostly accurate.<\/p>\n\n\n\n<p>The <code>int<\/code> keyword is indeed used in a type declaration to specify that a variable is of integer type. However, the specific range of an <code>int<\/code> variable is not fixed and can vary depending on the platform and compiler. In standard C, an <code>int<\/code> must have a range of at least -32,767 to +32,767, but it can be larger on many modern systems. It&#8217;s important to be aware of platform-specific variations when dealing with integer ranges in C programming.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>int x = 10;\n\n<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ int keyword\n#include &lt;stdio.h&gt;\n \nvoid sum() {\n    int a = 10, b = 20;\n    int sum;\n    sum = a + b;\n    printf(\"%d\", sum);\n}\n \n\/\/ Driver code\nint main() {\n    sum();\n    return 0;\n}<\/code><\/pre>\n\n\n\n<p>Output <\/p>\n\n\n\n<p>30<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"short-long-signed-and-unsigned\">Short, long, signed, and unsigned<\/h2>\n\n\n\n<p>Data types in C can have different ranges, and these ranges can vary from one compiler and system to another. It&#8217;s important to be aware of these ranges when working with different data types.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Data Type<\/th><th>Memory (bytes)<\/th><th>Range<\/th><th>Format Specifier<\/th><\/tr><\/thead><tbody><tr><th><strong>short int&nbsp;<\/strong><\/th><td>2<\/td><td>-32,768 to 32,767&nbsp;<\/td><td>%hd&nbsp;<\/td><\/tr><tr><th><strong>unsigned short int&nbsp;<\/strong><\/th><td>2 &nbsp;<\/td><td>0 to 65,535<\/td><td>%hu<\/td><\/tr><tr><th><strong>unsigned int&nbsp;<\/strong><\/th><td>4&nbsp;<\/td><td>0 to 4,294,967,295&nbsp;<\/td><td>%u&nbsp;<\/td><\/tr><tr><th><strong>long int&nbsp;<\/strong><\/th><td>4&nbsp;<\/td><td>-2,147,483,648 to 2,147,483,647<\/td><td>%ld&nbsp;<\/td><\/tr><tr><th><strong>unsigned long int<\/strong><\/th><td>4&nbsp;<\/td><td>0 to 4,294,967,295&nbsp;<\/td><td>%lu<\/td><\/tr><tr><th><strong>long long int &nbsp;<\/strong><\/th><td>8<\/td><td>-(2^63) to (2^63)-1&nbsp;<\/td><td>%lld&nbsp;<\/td><\/tr><tr><th><strong>unsigned long long int<\/strong><\/th><td>8<\/td><td>0 to 18,446,744,073,709,551,615<\/td><td>%llu<\/td><\/tr><tr><td><strong>signed char<\/strong><\/td><td>1 <\/td><td>-128 to 127&nbsp;<\/td><td>%c<\/td><\/tr><tr><td><strong>unsigned char&nbsp;<br><\/strong><br><\/td><td>1<\/td><td>0 to 255&nbsp;<br><br><\/td><td>%c<\/td><\/tr><tr><td><strong>long double<br><\/strong><br><\/td><td>16<br><br><\/td><td>3.4E-4932 to 1.1E+4932<br><br><\/td><td>%Lf<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>C program to demonstrate the short, long, signed, and unsigned keywords is provided below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ short, long, signed,\n\/\/ and unsigned keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main() {\n  \/\/ short integer\n  short int a = 12345;\n   \n  \/\/ signed integer\n  signed int b = -34;\n   \n  \/\/ unsigned integer\n  unsigned int c = 12;\n   \n  \/\/ L or l is used for\n  \/\/ long int in C.\n  long int d = 99998L;\n   \n  printf(\"Integer value with a short int data: %hd\", a);\n  printf(\"\\nInteger value with a signed int data: %d\", b);\n  printf(\"\\nInteger value with an unsigned int data: %u\", c);\n  printf(\"\\nInteger value with a long int data: %ld\", d);\n  return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Integer value with a short int data: 12345\nInteger value with a signed int data: -34\nInteger value with an unsigned int data: 12\nInteger value with a long int data: 99998<\/code><\/pre>\n\n\n\n<p><strong>return<\/strong><\/p>\n\n\n\n<p>The <code>return<\/code> statement in C exits a function and sends a value back to where the function was called. It&#8217;s a way for functions to provide results to the calling code.<\/p>\n\n\n\n<p>Below is the C program to demonstrate the return keyword:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ return keyword\n#include &lt;stdio.h&gt;\nint sum(int x, int y) {\n  int sum;\n  sum = x + y;\n  return sum;\n}\n \n\/\/ Driver code\nint main() {\n  int num1 = 10;\n  int num2 = 20;\n  printf(\"Sum: %d\",\n          sum(num1, num2));\n  return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output <\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sum: 30\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"sizeof\">sizeof&nbsp;<\/h2>\n\n\n\n<p>The <code>sizeof<\/code> keyword is used to determine the size of an expression in bytes. It can be applied to various entities in C, including variables, arrays, pointers, and data types. It&#8217;s a useful tool for calculating memory requirements and is often used in memory allocation and manipulation tasks.<\/p>\n\n\n\n<p><strong>Example <\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>sizeof(char);\nsizeof(int);\nsizeof(float); in bytes.<\/code><\/pre>\n\n\n\n<p>C program to demonstrate sizeof keyword is given below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonsstrate\n\/\/ sizeof keyword\n#include &lt;stdio.h&gt;\n \n\/\/ Driver code\nint main() {\n  int x = 10;\n  printf(\"%d\", sizeof(x));\n  return 0;\n}<\/code><\/pre>\n\n\n\n<p>Output <\/p>\n\n\n\n<p>4<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"register\">register<\/h2>\n\n\n\n<p>In C, you can declare variables as &#8220;register&#8221; variables, which suggest to the compiler that these variables should be stored in CPU registers rather than in memory. This is done to optimize the access time for frequently used variables, as accessing data from registers is significantly faster than accessing data from memory. However, it&#8217;s important to note that the use of the <code>register<\/code> keyword is a hint to the compiler, and modern compilers are often good at optimizing variable storage on their own, so explicit use of <code>register<\/code> is less common in modern C programming.<\/p>\n\n\n\n<p>Example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>register char c = 's'; \n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"static\">static&nbsp;<\/h2>\n\n\n\n<p>The <code>static<\/code> keyword is used to create static variables, which are not limited by a particular scope and can retain their values across function calls. They are preserved throughout the program&#8217;s execution and retain their values even after their scope has ended. Static variables are typically initialized only once, and their values persist between function calls, making them useful for various purposes such as maintaining state across function calls or sharing data among different functions within the same file.<\/p>\n\n\n\n<p><strong>For Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>static int num;\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"struct\">struct&nbsp;<\/h2>\n\n\n\n<p>The <code>struct<\/code> keyword is used to declare a structure, which is a user-defined composite data type in C. A structure allows you to group together variables of different data types under one custom data type. This enables you to create complex data structures that can represent real-world entities with multiple attributes. Structures are widely used for organizing and managing data in C programs, and they provide a way to encapsulate related data members into a single unit, making the code more organized and readable.<\/p>\n\n\n\n<p><strong>For Example:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Geek {\n    char name&#91;50];\n    int num;\n    double var;\n};<\/code><\/pre>\n\n\n\n<p>C program for the struct keyword is given below :<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to demonstrate\n\/\/ struct keyword\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n \nstruct Books {\n  char  title&#91;50];\n  char  author&#91;50];\n};\n \n\/\/ Driver code\nint main( ) {\n  \/\/ Declare Book1 of type Book\n  struct Books book1;       \n    \n \/\/ book 1 specification\n strcpy(book1.title, \"C++ Programming\");\n strcpy(book1.author, \"Bjarne Stroustrup\");\n  \n \/\/ Print book details\n printf(\"Book 1 title : %s\\n\", book1.title);\n printf(\"Book 1 author : %s\\n\", book1.author);\n return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Book 1 title : C++ Programming\nBook 1 author : Bjarne Stroustrup<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"typedef\">typedef&nbsp;<\/h2>\n\n\n\n<p>The <code>typedef<\/code> keyword is used to create new, user-defined data types with more descriptive and meaningful names. It allows you to define a data type using an alias or a new name, which can make your code more readable and maintainable. This is particularly useful when you want to create shorter or more descriptive names for complex data types, making your code easier to understand. For example, you can use <code>typedef<\/code> to create custom names for structures, pointers, or other data types to enhance code clarity and maintainability.<\/p>\n\n\n\n<p>For Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>typedef long num\n<\/code><\/pre>\n\n\n\n<p>we have changed the datatype name of \u201clong\u201d to \u201cnum\u201d in the above exmaple<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"union\">union&nbsp;<\/h2>\n\n\n\n<p>A union is a user-defined data type in C where all its data members, often referred to as &#8220;fields&#8221; or &#8220;members,&#8221; share the same memory location. Unlike structures, where each data member has its own memory location, in a union, the memory allocated for one data member can be used to store another data member. This means that the size of a union is determined by the size of its largest data member.<\/p>\n\n\n\n<p>Unions are typically used when you want to represent a single value that can be of different data types at different times during program execution. The ability to share memory among its members makes unions memory-efficient but requires careful handling to ensure that the correct data type is accessed at the appropriate time<\/p>\n\n\n\n<p>Example :<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>union GeekforGeeks {\n    int x;\n    char s;\n} obj;<\/code><\/pre>\n\n\n\n<p>C program for the union keyword is given below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n#include &lt;stdio.h&gt;\nunion student { \n  int age; \n  char marks;  \n} s; \n \n\/\/ Driver code\nint main() { \n  s.age = 15; \n  s.marks = 56;\n  printf(\"age = %d\", s.age); \n  printf(\"\\nmarks = %d\", s.marks); \n}<\/code><\/pre>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>age = 56\nmarks = 56<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"void\">void&nbsp;<\/h2>\n\n\n\n<p>In C, the <code>void<\/code> keyword is used to represent nothing or a null value. When used as a function&#8217;s return type, <code>void<\/code> indicates that the function does not return any value. This is commonly used for functions that perform actions or operations but do not produce a result that needs to be returned to the caller.<\/p>\n\n\n\n<p>Example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>void fun() {\n    \/\/ program\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"volatile\">volatile <\/h2>\n\n\n\n<p>In C, the <code>volatile<\/code> keyword is used to declare objects as volatile. A volatile object is one whose value can be changed at any time, even by code outside the current code&#8217;s scope. When a variable is declared as volatile, the compiler will not optimize accesses to that variable, ensuring that reads and writes to it are performed as explicitly specified in the code.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const volatile marks = 98;\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"faq-keywords-in-c\">FAQ- Keywords in C<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1694435223072\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. What is keywords in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans.Keywords in a programming language, such as C, are predefined or reserved words that serve specific functions and have fixed meanings. They cannot be used as variable names or identifiers within the program. Keywords play a crucial role in defining the syntax and structure of a C program, and they are essential building blocks for writing correct and well-structured code.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1694435371605\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. What is loop in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. Loops in C are used to execute a block of code repeatedly based on a given condition or a set number of iterations. They allow you to perform tasks multiple times, which can save code and make it more efficient. Loops are particularly useful for tasks such as iterating through elements of an array, processing data, and performing repetitive operations. They provide a powerful mechanism for automating repetitive tasks and controlling the flow of a program.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1694435483102\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3.What is a variable in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. A variable is a named memory location used to store data. It can be changed and reused in a program, identified by symbols.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n\n\n<p><a href=\"https:\/\/www.geeksforgeeks.org\/keywords-in-c\/?ref=lbp#article-meta-div\" rel=\"nofollow noopener\" target=\"_blank\"><\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Keywords In C Keywords in C programming are like building blocks that give the language its structure and meaning. Whether you&#8217;re new to programming or have experience, understanding these words is crucial for using C effectively. In this discussion, we&#8217;ll dive into what C keywords are, why they matter, and the different types you&#8217;ll encounter &#8230; <a title=\"Keywords In C\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/keywords-in-c\/\" aria-label=\"More on Keywords In C\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":5263,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[297],"class_list":["post-1776","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","tag-keywords-in-c","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/1776"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=1776"}],"version-history":[{"count":13,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/1776\/revisions"}],"predecessor-version":[{"id":10597,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/1776\/revisions\/10597"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/5263"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=1776"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=1776"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=1776"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}