{"id":2733,"date":"2024-05-10T11:22:12","date_gmt":"2024-05-10T11:22:12","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=2733"},"modified":"2024-05-10T11:22:12","modified_gmt":"2024-05-10T11:22:12","slug":"pointer-vs-array-in-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/pointer-vs-array-in-c\/","title":{"rendered":"Pointer Vs Array In C"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#pointer-vs-array-in-c\">Pointer Vs Array In C<\/a><\/li><li ><a href=\"#1-the-sizeof-operator\">1. The sizeof Operator<\/a><\/li><li ><a href=\"#2-the-operator\">2. The &amp; Operator<\/a><\/li><li ><a href=\"#3-string-literal-initialization-of-a-character-array\">3. String Literal Initialization of a Character Array<\/a><\/li><li ><a href=\"#4-pointer-variable-can-be-assigned-a-value-whereas-an-array-variable-cannot-be\"> 4. Pointer variable can be assigned a value whereas an array variable cannot be<\/a><\/li><li ><a href=\"#5-arithmetic-on-pointer-variable-is-allowed\">5. Arithmetic on pointer variable is allowed<\/a><\/li><li ><a href=\"#6-arithmetic-on-array-variable-is-not-allowed\">6. Arithmetic on array variable is not allowed<\/a><\/li><li ><a href=\"#7-array-is-a-collection-of-similar-data-types-while-the-pointer-variable-stores-the-address-of-another-variable\">7. Array is a collection of similar data types while the pointer variable stores the address of another variable<\/a><\/li><li ><a href=\"#faq-pointer-vs-array-in-c\">FAQ-Pointer vs Array in C<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"pointer-vs-array-in-c\">Pointer Vs Array In C<\/h2>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"1-the-sizeof-operator\">1. The sizeof Operator<\/h2>\n\n\n\n<p>When you use <code>sizeof(array)<\/code>, it tells you the size (in bytes) that the entire array occupies in memory. For example, if you have an array <code>int arr[5]<\/code>, <code>sizeof(arr)<\/code> will return the total memory consumed by all five integers in the array.<\/p>\n\n\n\n<p>On the other hand, <code>sizeof(pointer)<\/code> only gives you the size of the pointer variable itself, which is typically a fixed amount of memory (e.g., 4 or 8 bytes, depending on your system). It doesn&#8217;t account for the memory occupied by what the pointer is pointing to; it just tells you the size of the &#8220;address holder.&#8221;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"2-the-operator\">2. The &amp; Operator<\/h2>\n\n\n\n<p>When you use <code>array<\/code>, it&#8217;s like saying &#8220;give me the address of the first element in the array.&#8221; So, if you have an array <code>int arr[5]<\/code>, <code>array<\/code> is equivalent to <code>&amp;arr[0]<\/code> and provides the memory address of the first integer in the array.<\/p>\n\n\n\n<p>When you use <code>&amp;pointer<\/code>, it gives you the memory address where the pointer variable is stored, not what it&#8217;s pointing to. It&#8217;s like asking for the address of the &#8220;address holder&#8221; itself.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"3-string-literal-initialization-of-a-character-array\">3. String Literal Initialization of a Character Array<\/h2>\n\n\n\n<p>When you initialize a character array-like <code>char str[] = \"Hello\";<\/code>, it creates an array named <code>str<\/code>. This array is large enough to hold the string &#8220;Hello&#8221; along with a null-terminator character (<code>'\\0'<\/code>) at the end, which signifies the end of the string. So, <code>str<\/code> contains space for 6 characters (5 for &#8220;Hello&#8221; plus 1 for <code>'\\0'<\/code>).<\/p>\n\n\n\n<p>This is different from a pointer to a string literal. If you had <code>char* ptr = \"Hello\";<\/code>, <code>ptr<\/code> would point to a constant string literal in memory, and its size is just the size of a pointer (e.g., 4 or 8 bytes), not the size of the string itself.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"4-pointer-variable-can-be-assigned-a-value-whereas-an-array-variable-cannot-be\"> 4. Pointer variable can be assigned a value whereas an array variable cannot be<\/h2>\n\n\n\n<p>In C and C++, you can assign a value to a pointer variable, as shown in your example with <code>p=a;<\/code>. However, you cannot directly assign one array to another, as arrays are not modifiable l-values.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"5-arithmetic-on-pointer-variable-is-allowed\">5. Arithmetic on pointer variable is allowed<\/h2>\n\n\n\n<p>You can perform arithmetic operations on pointer variables, such as incrementing or decrementing them, which is often used to navigate through arrays or data structures. In your example, <code>p++;<\/code> is legal because it increments the pointer <code>p<\/code> to point to the next element.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"6-arithmetic-on-array-variable-is-not-allowed\">6. Arithmetic on array variable is not allowed<\/h2>\n\n\n\n<p>You cannot perform arithmetic operations directly on array variables. Arrays are not modifiable l-values, so <code>a++;<\/code> is illegal because you&#8217;re trying to modify the base address of the array.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"7-array-is-a-collection-of-similar-data-types-while-the-pointer-variable-stores-the-address-of-another-variable\">7. Array is a collection of similar data types while the pointer variable stores the address of another variable<\/h2>\n\n\n\n<p>Arrays are collections of elements of the same data type. Pointers, on the other hand, store memory addresses that can point to variables or data of various types. Pointers provide flexibility in referencing different data types.<\/p>\n\n\n\n<p>Understanding these distinctions is important for writing code that correctly handles memory and data in C and C++.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"faq-pointer-vs-array-in-c\">FAQ-Pointer vs Array in C<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1697525516638\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. What is the difference between a pointer and an array in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans.<br \/><strong>Array<\/strong>: A data collection with elements of the same data type.<br \/><strong>Pointer<\/strong>: A variable that stores the memory address of another variable.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1697525528937\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. Why is pointer better than array?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans.<br \/><strong>Arrays<\/strong>: Static; their size can&#8217;t change based on user needs.<br \/><strong>Pointers<\/strong>: Dynamic; memory allocation can be resized later if required.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1697525539929\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3. What is the size of array vs pointer?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans.<br \/><strong>Arrays<\/strong>: Always have a set, unchanging amount of memory.<br \/><strong>Pointers<\/strong>: Can adjust the amount of memory they use as needed.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>","protected":false},"excerpt":{"rendered":"<p>Pointer Vs Array In C 1. The sizeof Operator When you use sizeof(array), it tells you the size (in bytes) that the entire array occupies in memory. For example, if you have an array int arr[5], sizeof(arr) will return the total memory consumed by all five integers in the array. On the other hand, sizeof(pointer) &#8230; <a title=\"Pointer Vs Array In C\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/pointer-vs-array-in-c\/\" aria-label=\"More on Pointer Vs Array In C\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":5377,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[469],"class_list":["post-2733","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","tag-pointer-vs-array-in-c","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2733"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=2733"}],"version-history":[{"count":13,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2733\/revisions"}],"predecessor-version":[{"id":10728,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2733\/revisions\/10728"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/5377"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=2733"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=2733"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=2733"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}