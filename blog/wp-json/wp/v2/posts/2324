{"id":2324,"date":"2024-05-10T07:20:48","date_gmt":"2024-05-10T07:20:48","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=2324"},"modified":"2024-05-10T07:20:48","modified_gmt":"2024-05-10T07:20:48","slug":"parameter-passing-techniques-in-c-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/parameter-passing-techniques-in-c-c\/","title":{"rendered":"Parameter Passing Techniques In C\/C++"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#parameter-passing-techniques-in-c-c\">Parameter Passing Techniques In C\/C++<\/a><\/li><li ><a href=\"#terminology\">Terminology<\/a><\/li><li ><a href=\"#important-methods-of-parameter-passing\">Important Methods of Parameter Passing <\/a><ul><li ><a href=\"#1-pass-by-value\">1. Pass By Value<\/a><\/li><li ><a href=\"#2-pass-by-reference-aliasing\">2. Pass by reference(aliasing)<\/a><\/li><\/ul><\/li><li ><a href=\"#other-methods-of-parameter-passing\">Other Methods of Parameter Passing<\/a><\/li><li ><a href=\"#faq-parameter-passing-techniques-in-c-c\">FAQ- Parameter Passing Techniques In C\/C++<\/a><\/li><li ><a href=\"#-1\"> <\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"parameter-passing-techniques-in-c-c\">Parameter Passing Techniques In C\/C++<\/h2>\n\n\n\n<p>Caller Function (A): The caller function, also known as the calling function or the client function, is the function that initiates the call to another function.  Function A is the caller function because it is calling function B.Called Function or Callee Function (B): The called function, also known as the callee function or the target function, is the function that is invoked or executed when called by another function. Function B is called a function because it is invoked by function A. Actual Arguments: Actual arguments, also referred to as arguments or parameters, are the values or expressions that are passed to a function when it is called. These values are specific to the particular function call and are used as input for the function&#8217;s computation. In your example, the arguments sent from function A to function B are the actual arguments.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"terminology\">Terminology<\/h2>\n\n\n\n<ol class=\"wp-block-list\">\n<li><strong>Formal Parameter<\/strong>: A formal parameter is like a variable declaration within the function or method&#8217;s prototype or definition. It specifies the name of the parameter and its data type. It serves as a placeholder for the actual value that will be passed when the function or method is called.<\/li>\n\n\n\n<li><strong>Actual Parameter<\/strong>: An actual parameter, on the other hand, is the real value or expression provided in the function or method call, which corresponds to a formal parameter. It is the concrete data that gets passed into the function or method when it is invoked.<\/li>\n\n\n\n<li><strong>Modes<\/strong>:\n<ul class=\"wp-block-list\">\n<li><strong>IN Mode<\/strong>: When a parameter is passed as IN, it means the caller is providing information to the callee. The callee can use this information but cannot modify the original value in the caller.<\/li>\n\n\n\n<li><strong>OUT Mode<\/strong>: When a parameter is passed as OUT, it means the callee can write or modify the value of this parameter, and those modifications will be reflected in the caller&#8217;s environment.<\/li>\n\n\n\n<li><strong>IN\/OUT Mode<\/strong>: This combines both IN and OUT modes. The caller provides an initial value to the callee, and the callee can both use and modify the value, which will then be visible to the caller after the function or method call.<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n\n\n\n<p>These concepts are often used in programming to control how data is passed between functions or methods, whether data is read-only, write-only, or both.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"important-methods-of-parameter-passing\">Important Methods of Parameter Passing <\/h2>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"1-pass-by-value\">1. Pass By Value<\/h3>\n\n\n\n<p>In this method, when you pass a parameter to a function or method, it&#8217;s like making a photocopy of a document. The function works with the photocopy (the formal parameter), not the original document (the actual parameter) from the caller. Any changes made to the photocopy don&#8217;t affect the original document. So, modifications to the formal parameter inside the function only affect its own copy and don&#8217;t impact the original value in the caller&#8217;s environment. This is why it&#8217;s called &#8220;call by value&#8221; because you&#8217;re passing the value, not the original variable itself.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\" id=\"example-of-pass-by-value\">Example of Pass by Value<\/h4>\n\n\n\n<pre class=\"wp-block-code\"><code>\n\/\/ C program to illustrate\n\/\/ call by value\n#include &lt;stdio.h&gt;\n \nvoid func(int a, int b)\n{\n    a += b;\n    printf(\"In func, a = %d b = %d\\n\", a, b);\n}\nint main(void)\n{\n    int x = 5, y = 7;\n \n    \/\/ Passing parameters\n    func(x, y);\n    printf(\"In main, x = %d y = %d\\n\", x, y);\n    return 0;\n}<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>In func, a = 12 b = 7\nIn main, x = 5 y = 7<\/code><\/pre>\n\n\n\n<p><strong>Disadvantages Of Pass By Value<\/strong><\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li><strong>Inefficiency in Storage Allocation<\/strong>: When you pass data by value, a copy of that data is created. This can be problematic for objects or arrays because making copies of large data structures consumes a significant amount of memory and can slow down your program. Imagine copying a large dataset every time you pass it to a function \u2013 it&#8217;s not efficient in terms of memory usage.<\/li>\n\n\n\n<li><strong>Costly Copy Semantics<\/strong>: Copying objects or arrays can be costly in terms of time and memory. It takes time to duplicate the data, and if the data is large, it can lead to performance issues. Additionally, if you have multiple functions or methods that need to work on the same data, making copies every time can lead to redundancy and waste of resources.<\/li>\n<\/ol>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"2-pass-by-reference-aliasing\">2. Pass by reference(aliasing)<\/h3>\n\n\n\n<p>In this method, when you pass a parameter, it&#8217;s like giving the function a direct map to the original data. Any changes made to the map (the formal parameter) affect the actual data (the actual parameter) in the caller&#8217;s environment. It&#8217;s like multiple people looking at the same map and drawing on it together. This approach is called &#8220;call by reference&#8221; because you&#8217;re passing a reference to the original data, making it efficient in both time and space since you&#8217;re not creating unnecessary copies.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n\/\/ C program to illustrate\n\/\/ call by reference\n#include &lt;stdio.h&gt;\n \nvoid swapnum(int* i, int* j)\n{\n    int temp = *i;\n    *i = *j;\n    *j = temp;\n}\n \nint main(void)\n{\n    int a = 10, b = 20;\n \n    \/\/ passing parameters\n    swapnum(&amp;a, &amp;b);\n \n    printf(\"a is %d and b is %d\\n\", a, b);\n    return 0;\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><\/h2>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>a is 20 and b is 10\n<\/code><\/pre>\n\n\n\n<p><strong>Disadvantages of Pass by reference <\/strong><\/p>\n\n\n\n<p>Programming involves numerous scenarios and can be challenging due to their complexity. Code can be intricate, debugging isn&#8217;t always easy, and maintaining projects can be tricky. Clear documentation and teamwork help mitigate these issues.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"other-methods-of-parameter-passing\">Other Methods of Parameter Passing<\/h2>\n\n\n\n<p>These techniques are older and were used in earlier programming languages like Pascal, Algol, and Fortran. These techniques won&#8217;t be applicable in high-level languages.<\/p>\n\n\n\n<p><strong>1. Pass by Result<\/strong><\/p>\n\n\n\n<p>In this method, known as &#8220;out-mode semantics&#8221; or &#8220;call by the result,&#8221; the formal parameter&#8217;s value is sent back to the actual parameter just before the control returns to the caller. This is often implemented by making a copy of the value.<\/p>\n\n\n\n<p><strong>2. Pass by Value-Result<\/strong><\/p>\n\n\n\n<p>This method uses &#8220;in\/out-mode semantics,&#8221; which is a mix of pass-by-value and pass-by-result. Just before the control returns to the caller, the formal parameter&#8217;s value is sent back to the actual parameter. It&#8217;s also known as &#8220;call by value-result.&#8221;<\/p>\n\n\n\n<p><strong>3. Pass by Name<\/strong><\/p>\n\n\n\n<p>This method is commonly used in programming languages like Algol. In this technique, the variable&#8217;s symbolic &#8220;name&#8221; is passed as a parameter, allowing it to be both accessed and updated within a function or method. This method enables direct manipulation of the original variable using its name.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>procedure double(x);\n  real x;\nbegin \n  x:=x*2\nend;<\/code><\/pre>\n\n\n\n<ol class=\"wp-block-list\">\n<li><strong>Re-evaluation of Argument<\/strong>: With pass-by-name, the argument expression is re-evaluated each time the formal parameter is passed. This means that the value of the argument is recalculated whenever it&#8217;s accessed within the procedure.<\/li>\n\n\n\n<li><strong>Variable Value Changes<\/strong>: Since the argument expression is re-evaluated, the procedure can modify the values of variables used in that expression. Consequently, this can alter the overall value of the expression. It allows the procedure to change the variables used in the argument expression and, as a result, modify the expression&#8217;s final value.<\/li>\n<\/ol>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"faq-parameter-passing-techniques-in-c-c\">FAQ- Parameter Passing Techniques In C\/C++<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1696498633404\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. What are the parameter-passing techniques in C++?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. <br \/>In C++, when a parameter is passed &#8220;by value,&#8221; a copy of the actual argument&#8217;s value is created for use within the function. Any changes made to this copy inside the function do not affect the original value of the actual argument that was used in the function call. In other words, modifications to the parameter inside the function are local and do not impact the value outside the function.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1696498665345\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. What are the default parameters in C++?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. Default arguments in C++ allow you to assign default values to function parameters. These default values are specified at the trailing end (right side) of the parameter list. When calling the function, if an argument for a parameter with a default value is not provided, the default value is used. Default arguments enhance code reusability, simplify function calls, and make programs more effective by providing sensible default behavior when needed.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1696498682772\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3. What does &amp; mean in C++ parameters?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. The ampersand symbol &amp; is referred to as a reference declarator in addition to being the address operator in C ++.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n\n\n<h2 class=\"wp-block-heading\" id=\"-1\"><br><\/h2>\n","protected":false},"excerpt":{"rendered":"<p>Parameter Passing Techniques In C\/C++ Caller Function (A): The caller function, also known as the calling function or the client function, is the function that initiates the call to another function. Function A is the caller function because it is calling function B.Called Function or Callee Function (B): The called function, also known as the &#8230; <a title=\"Parameter Passing Techniques In C\/C++\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/parameter-passing-techniques-in-c-c\/\" aria-label=\"More on Parameter Passing Techniques In C\/C++\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":2326,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[419],"class_list":["post-2324","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","tag-parameter-passing-techniques-in-c-c","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2324"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=2324"}],"version-history":[{"count":12,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2324\/revisions"}],"predecessor-version":[{"id":10650,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2324\/revisions\/10650"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/2326"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=2324"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=2324"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=2324"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}