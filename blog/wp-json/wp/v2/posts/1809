{"id":1809,"date":"2024-05-10T06:48:48","date_gmt":"2024-05-10T06:48:48","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=1809"},"modified":"2024-05-10T06:48:48","modified_gmt":"2024-05-10T06:48:48","slug":"constants-in-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/constants-in-c\/","title":{"rendered":"Constants  In C"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#constants-in-c\">Constants In C<\/a><\/li><li ><a href=\"#what-is-constant-in-c\">What is Constant in  C<\/a><\/li><li ><a href=\"#how-to-define-constant-in-c\">How to Define Constant in C <\/a><\/li><li ><a href=\"#example-of-constants-in-c\">Example of Constants in C<\/a><\/li><li ><a href=\"#types-of-constants-in-c\">Types Of Constants in C<\/a><\/li><li ><a href=\"#properties-of-constant-in-c\">Properties of Constant in C<\/a><\/li><li ><a href=\"#key-difference-between-constants-and-literals\"> Key Difference between Constants And Literals <\/a><\/li><li ><a href=\"#defining-constant-using-define-preprocessor\">Defining Constant using #define Preprocessor<\/a><\/li><li ><a href=\"#faq-constants-in-c\">FAQ- Constants  In C<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"constants-in-c\">Constants In C<\/h2>\n\n\n\n<p>In the world of programming, constants play a foundational role. They are like unchanging pillars of information, providing stability and clarity to the code. In C, one of the most widely used programming languages, constants are vital elements that maintain their values throughout the program&#8217;s execution. These unchanging values are not only crucial for maintaining code integrity but also for enhancing readability and maintainability. In this exploration of constants in C, we will look into their types, usage, and the fundamental role they play in shaping the behavior of C programs.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"what-is-constant-in-c\">What is Constant in  C<\/h2>\n\n\n\n<p>In C programming, a constant is a variable that remains unchanged once it is declared in the program. Once you define a constant, you cannot alter its value during the program&#8217;s execution. Constants are essentially values that are fixed and do not vary throughout the program.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"how-to-define-constant-in-c\">How to Define Constant in C <\/h2>\n\n\n\n<p>In the C language, we use the <code>const<\/code> keyword to define a constant. This keyword, often referred to as a &#8220;const type qualifier,&#8221; is positioned at the beginning of a variable declaration to indicate that the variable is a constant. Once declared as a constant using <code>const<\/code>, the variable&#8217;s value cannot be changed throughout the program.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"example-of-constants-in-c\">Example of Constants in C<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C program to illustrate constant variable definition\n#include &lt;stdio.h&gt;\n \nint main()\n{\n \n    \/\/ defining integer constant using const keyword\n    const int int_const = 25;\n \n    \/\/ defining character constant using const keyword\n    const char char_const = 'A';\n \n    \/\/ defining float constant using const keyword\n    const float float_const = 15.66;\n \n    printf(\"Printing value of Integer Constant: %d\\n\",\n           int_const);\n    printf(\"Printing value of Character Constant: %c\\n\",\n           char_const);\n    printf(\"Printing value of Float Constant: %f\",\n           float_const);\n \n    return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output <\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Printing value of Integer Constant: 25\nPrinting value of Character Constant: A\nPrinting value of Float Constant: 15.660000<\/code><\/pre>\n\n\n\n<p><strong>Note: <\/strong>In C, when we create a constant variable, we have to give it a value right when we create it. If we forget to do that, it might end up with some random, useless value, and we won&#8217;t be able to change it later<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"types-of-constants-in-c\">Types Of Constants in C<\/h2>\n\n\n\n<p>The type of the constant is the same as the data type of the variables. The types of constants are given below <\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Integer Constant<\/li>\n\n\n\n<li>Character Constant<\/li>\n\n\n\n<li>Floating Point Constant<\/li>\n\n\n\n<li>Double Precision Floating Point Constant<\/li>\n\n\n\n<li>Array Constant<\/li>\n\n\n\n<li>Structure Constant<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"properties-of-constant-in-c\">Properties of Constant in C<\/h2>\n\n\n\n<p>The important properties of constant variables in C defined using the const keyword are as follows:<\/p>\n\n\n\n<p><strong>1. Initialization with Declaration<\/strong><\/p>\n\n\n\n<p>In C, constant variables must be initialized at the time of their declaration. If you don&#8217;t provide an initial value when declaring a constant variable, it will typically contain an undefined or &#8220;garbage&#8221; value. Therefore, it&#8217;s essential to assign a value to a constant variable when declaring it to ensure it holds a meaningful and specified value throughout its lifetime in the program.<\/p>\n\n\n\n<p><strong>2. Immutability<\/strong><\/p>\n\n\n\n<p>In C, constant variables are unchangeable once they are defined. This means you can only set their initial value once in the entire program, and after that, you cannot modify the value stored in that variable. Once a constant variable is set, it remains the same throughout the program&#8217;s execution.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C Program to demonstrate the behaviour of constant\n\/\/ variable\n#include &lt;stdio.h&gt;\n \nint main()\n{\n    \/\/ declaring a constant variable\n    const int var;\n    \/\/ initializing constant variable var after declaration\n    var = 20;\n \n    printf(\"Value of var: %d\", var);\n    return 0;\n}<\/code><\/pre>\n\n\n\n<p>Output <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>In function 'main':\n10:9: error: assignment of read-only variable 'var'\n10 |     var = 20;\n   |         ^<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"key-difference-between-constants-and-literals\"><br>Key Difference between Constants And Literals <\/h2>\n\n\n\n<p>The constant and literals are often confused as the same. But in C language, they are different entities and have different semantics. The following table list the differences between the constants and literals in C:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong><em>Constant<\/em><\/strong><\/td><td><strong><em>Literals<\/em><\/strong><\/td><\/tr><tr><td>Constants are variables that can&#8217;t be modified once it is declared.<br><\/td><td>Literals are fixed-values who define themselves.<\/td><\/tr><tr><td>Literals are fixed-values who define themselves. <\/td><td>Literals are indeed the actual values that are assigned to variables or used in expressions. They are fixed, concrete values, such as numbers or characters, that are directly written into the code.<br><\/td><\/tr><tr><td>The address of the constant can be found.<br><\/td><td>It cannot determine the address of a literal, except in the case of string literals.<\/td><\/tr><tr><td>They have lvalues<\/td><td>They have rvalues<\/td><\/tr><tr><td>They have values<\/td><td>An example for rvalues is 24,15.5, \u2018a\u2019, \u201cGeeks\u201d, etc.<br><br><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"defining-constant-using-define-preprocessor\">Defining Constant using #define Preprocessor<\/h2>\n\n\n\n<p>You can define constants in C using the <code>#define<\/code> preprocessor directive. These constants, often referred to as macros, behave like constants.<\/p>\n\n\n\n<p><strong>Syntax of Constant in C using #define<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>#define const_name value\n<\/code><\/pre>\n\n\n\n<p>Example :<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/ C Program to define a constant using #define\n#include &lt;stdio.h&gt;\n#define pi 3.14\n \nint main()\n{\n \n    printf(\"The value of pi: %.2f\", pi);\n    return 0;\n}<\/code><\/pre>\n\n\n\n<p><strong>Output<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of pi: 3.14\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"faq-constants-in-c\">FAQ- Constants  In C<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1694512566954\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. What is constant and its type?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. In C, constants are categorized by their values, and their types are determined by those values. Common types include integers (0 to 2147483647), strings, hexadecimal numbers, and bit values. No explicit type declarations are needed; C infers the types based on context.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1694512586739\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. What is static and constant?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. In C, &#8220;static&#8221; is a storage specifier, while &#8220;const&#8221; or &#8220;constant&#8221; is a type qualifier. &#8220;Static&#8221; can be assigned for reference types and set at runtime, while constants are set at compile-time and assigned for value types only.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1694512606290\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3. What are the two types of constants in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. In C, constants are categorized into two main types: primary and secondary. These primary and secondary constants further have subcategories. You can declare constants in C using two methods: by using the <code>const<\/code> keyword or by using the <code>#define<\/code> preprocessor directive.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>","protected":false},"excerpt":{"rendered":"<p>Constants In C In the world of programming, constants play a foundational role. They are like unchanging pillars of information, providing stability and clarity to the code. In C, one of the most widely used programming languages, constants are vital elements that maintain their values throughout the program&#8217;s execution. These unchanging values are not only &#8230; <a title=\"Constants  In C\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/constants-in-c\/\" aria-label=\"More on Constants  In C\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":5267,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[302],"class_list":["post-1809","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","tag-constants-in-c","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/1809"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=1809"}],"version-history":[{"count":11,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/1809\/revisions"}],"predecessor-version":[{"id":10599,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/1809\/revisions\/10599"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/5267"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=1809"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=1809"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=1809"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}